esphome:
  name: studna
  friendly_name: "Senzor studny"
  area: zahrada

esp8266:
  board: d1_mini_pro
  restore_from_flash: true

logger:
  level: INFO

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap: {}

ota:
  platform: esphome

captive_portal:

web_server:
  port: 80
  version: 3
  log: true

time:
  - platform: sntp
    id: sntp_time
    timezone: Europe/Prague
    on_time_sync:
      then:
        - logger.log: "Synchronized system clock"

text_sensor:
  - platform: template
    id: show_time
    name: "Cas"
    web_server:
      sorting_weight: 2

  - platform: wifi_info
    ip_address:
      name: "WiFi IP Address"
      id: wifi_ip
      web_server:
        sorting_weight: 70

sensor:
  - platform: ultrasonic
    trigger_pin: D7
    echo_pin: D6
    name: "Vzdalenost od hladiny ted"
    id: vzdalenost
    unit_of_measurement: "cm"
    update_interval: 1s
    filters:
      - lambda: return x * 100;
    web_server:
      sorting_weight: 49

  - platform: copy
    source_id: vzdalenost
    name: "Vzdalenost od hladiny prumer"
    id: vzdalenost_prumer
    unit_of_measurement: "cm"
    accuracy_decimals: 0
    filters:
      - sliding_window_moving_average:
          window_size: 10
          send_every: 1
      - filter_out: nan
      - lambda: return round(x);
    web_server:
      sorting_weight: 10

  - platform: copy
    source_id: vzdalenost_prumer
    name: "Objem vody"
    id: objem_vody
    icon: "mdi:water"
    unit_of_measurement: "l"
    accuracy_decimals: 0
    filters:
      - sliding_window_moving_average:
          window_size: 30
          send_every: 10
      - filter_out: nan
      - lambda: return round((3.14 * (id(prumer).state / 2.0) * (id(prumer).state / 2.0) * (id(hloubka).state - x)) / 1000) ;
    web_server:
      sorting_weight: 5


  - platform: wifi_signal
    name: "WiFi Signal dB"
    id: wifi_signal_db
    update_interval: 10s
    entity_category: "diagnostic"
    web_server:
      sorting_weight: 32

  - platform: copy
    source_id: wifi_signal_db
    name: "WiFi Signal Percent"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "Signal %"
    entity_category: "diagnostic"
    device_class: ""
    web_server:
      sorting_weight: 34
    
number:
  - platform: template
    name: "Vzdalenost ode dna"
    id: hloubka
    optimistic: true
    min_value: 1
    max_value: 300
    initial_value: 200
    step: 1
    restore_value: true
    mode: box
    device_class: distance
    web_server:
      sorting_weight: 20

  - platform: template
    name: "Prumer studny"
    id: prumer
    optimistic: true
    min_value: 1
    max_value: 200
    initial_value: 150
    step: 1
    restore_value: true
    mode: box
    device_class: distance
    web_server:
      sorting_weight: 30

  - platform: template
    name: "Log Level"
    id: log_level
    optimistic: true
    min_value: 0
    max_value: 3
    step: 1
    initial_value: 1  # Start at 'Errors only'
    restore_value: true
    web_server:
      sorting_weight: 60
    mode: slider
    unit_of_measurement: "Level"
    on_value:
      then:
        - lambda: |-
            int logLevel = int(id(log_level).state);
            ESP_LOGI("custom", "Log level changed to %d", logLevel);

button:
  - platform: restart
    name: "Studna Restart"
    web_server:
      sorting_weight: 40

interval:
  - interval: 1s
    then:
      - lambda: |-
          // Log level meanings:
          // 0 = Silent
          // 1 = Errors only
          // 2 = Normal (Info)
          // 3 = Verbose / Debug

          // Read log level state
          int logLevel = int(id(log_level).state);
          
          auto time = id(sntp_time).now();
          char strftime_buf[64];
          time.strftime(strftime_buf, sizeof(strftime_buf), "%Y-%m-%d %H:%M:%S");
          id(show_time).publish_state(strftime_buf);

          // Only execute if log level is normal or verbose
          if (logLevel == 3) {
            ESP_LOGI("custom", "Verbose: Time updated to %s", strftime_buf);
            // Log all sensors manually at verbose level
            ESP_LOGI("custom", "Sensor - Vzdalenost ted: %.2f cm", id(vzdalenost).state);
            ESP_LOGI("custom", "Sensor - Vzdalenost prumer: %.2f cm", id(vzdalenost_prumer).state);
            ESP_LOGI("custom", "Sensor - WiFi Signal dB: %.2f dB", id(wifi_signal_db).state);
            ESP_LOGI("custom", "Sensor - Objem vody: %.2f l", id(objem_vody).state);
          }
